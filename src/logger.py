'Logger and Saver for Model Training and Testing data'

import os
import csv
import shutil
from datetime import datetime

import torch
#import horovod.torch as hvd

from src.util import strfdelta
class Logger:
    """Handles logging of training progress including loss, parameters and model files."""
    def __init__(self, state, model):
        """Initalizes logger.

        Parameters:
        state: the training state
        model: the model
        """
        self.state = state
        self.epoch = 0
        self.model = model
        OFFSET = 1
        rank = 0 #hvd.rank()
        self.path = "models/{}/".format(rank + OFFSET)
        self.num = len(os.listdir(self.path))
        self.path = "models/{}/model{}/{}".format(rank + OFFSET, self.num, '{}')
        os.makedirs("models/{}/model{}/".format(rank + OFFSET, self.num)) #  0 = hvd.rank()
        self.best_loss = (10000, 10000, 10000)
        self.write_param_file()
        self.start_time = datetime.now()
    def write_param_file(self):
        """Writes model params to file"""
        csv_data = [["architecture", self.state.network_type],\
            ["dataset", self.state.dataset_type],\
            ["layer size", self.state.layer_size],\
            ["depth", self.state.depth],\
            ["activation function", str(self.state.activation_function)],\
            ["dropout", self.state.dropout],\
            ["batch size", self.state.batch_size],\
            ["learning rate", self.state.learning_rate]]
        with open(self.path.format("params.csv"), 'w') as csv_file:
            writer = csv.writer(csv_file)
            writer.writerows(csv_data)
        csv_file.close()
    def finish_param_file(self):
        """Writes additional loss info to param file"""
        csv_data = [["epochs", self.epoch],\
            ["loss", self.best_loss[0]],\
            ["radian loss", self.best_loss[1]],\
            ["mse loss", self.best_loss[2]],\
            ["elapsed time", strfdelta((datetime.now() - self.start_time), '{H:02}:{M:02}:{S:02}')]]
        with open(self.path.format("params.csv"), 'a') as csv_file:
            writer = csv.writer(csv_file)
            writer.writerows(csv_data)
        csv_file.close()
    def save_epoch(self, training_loss, test_loss):
        """Save whole epoch loss information
        
        Parameters:
        training_loss: contains training loss info. Type: tuple, float or tensor
        test_loss: contains test loss info. Type: tuple, float or tensor"""
        self.epoch = self.epoch + 1
        self.value("train_loss", training_loss, append_epoch=True)
        self.value("test_loss", test_loss, append_epoch=True)
        if test_loss[0] < self.best_loss[0]:
            self.save_model(self.model)
            self.best_loss = test_loss
    def value(self, key, value, append_epoch=False):
        """Log value to [key].csv. If append_epoch is True, the current epoch will be added also.
        
        Parameters:
        key: the key. Type: string
        value: the value. Type: tuple, float or tensor
        append_epoch: Should current epoch be appended? default: False
        """
        if isinstance(value, tuple):
            value = list(value)
        if not isinstance(value, list):
            value = [value]
        value = [x.item() if isinstance(x, torch.Tensor) else x for x in value]
        if append_epoch:
            value.insert(0, self.epoch)
        with open(self.path.format(key+".csv"), 'a') as file:
            writer = csv.writer(file)
            writer.writerow(value)
    def save_model(self, model):
        """Save model to file.

        Parameters:
        model: the model to save"""
        torch.save(model.state_dict(), self.path.format('model.pt'))
    def remove(self):
        """Remove all files generated by this logger.
        """
        shutil.rmtree(self.path.format(''))
